

// select all the ressources to take into a container
// if not false, it will be taken
// can change who take it (here @flare)
// the bot will take ressource to it's max transport capacity


import onOff
import idBots
import msg


set appro container1

set switch switch1
set message message1


// which bot to use
ubind @flare  // let player choose with bot image the bind
set botNb 1

set radiusApproche 6 // max working radius: 8


if @unit == null  // no bot of that type
    print "[yellow] no bots of the choosen type, \n"
    print "you can pick another kind of bot in the instruction 'ubind' at the begining of the programme"
    msg.printAndWait("", message)
    end


set coreX null
set coreY null


if appro != null
    print "[green] appro not null, will replace core to take ressource from"
    msg.printAndWait(appro, message)
    // appro position, default to core if null
    sensor coreX appro @x
    sensor coreY appro @y
    set core appro

// get core position
#ref getCorePos
// require to have a @unite
if coreX == null
    msg.printAndWait("looking for core, this is done once", message)
    ulocate building core false @copper coreX coreY coreFound core
    if coreFound == false
        msg.printAndWait("[red] core not found, searching again", message)
        msg.printAndWait(core, message)
        msg.printAndWait(coreFound, message)
        jump getCorePos
    msg.printAndWait("[green] core found", message)


procId = idBots.genProcId()

set botOwnedNb 0

set loopSearchingBots 0



sensor botType @unit @type // get botType

if botNb > 4
    msg.printAndWait("[red] can't take more than 4 bots\n change parameter 'botNb' to fix it", message)
    end

listBotRessourceLink = [
    (bot1, res1, link1), (bot2, res2, link2),
    (bot3, res3, link3), (bot4, res4, link4)
]

// free memory
// variable content is keep after end instruction, memory not free
for ownedBot, botRessource, botFactoLink in listBotRessourceLink
    set ownedBot null
    set botRessource null
    set botFactoLink 0

set currentOwnedId 1


// --- Prog Loop ---
#ref loop

// switch to turn off
isOn = onOff.isOn(switch)
if isOn != true
    msg.printAndWait("[yellow] process is turn off", message)
    end // to reset procId and botOwnedNb


op add loopSearchingBots loopSearchingBots 1
if loopSearchingBots > 24
    print "[red] no bots of type: [grey]"
    print botType
    msg.printAndWait("[red] free", message)


// take bot if need more, else loop thought owned bots
if botOwnedNb < botNb // need one ?
    print "[white] need some more bots"
    printflush message
    ubind botType  // try to catch one
    if @unit == null // we no longuer have that kind of bots
        print "[yellow] no bots of the choosen type anymore, \n"
        print "you can pick another kind of bot in the instruction 'ubind' at the begining of the programme"
        msg.printAndWait("", message)
        jump loop
    // have an owner ?
    sensor owner @unit @controller
    sensor typeOfOwner owner @type
    sensor botFlag @unit @flag
    if typeOfOwner == botType   // no owner
        if botFlag == 0         // no flag
            ucontrol flag procId null null null null  // tag it
            print "[green] free bot found !"
            printflush message
            op add botOwnedNb botOwnedNb 1  // botOwnedNb += 1
            // save owned bot
            for ownedBot in [bot1, bot2, bot3, bot4]
                if ownedBot == null
                    set ownedBot @unit
                    jump endBotSave  // kind of a break

#ref endBotSave
set loopSearchingBots 0



for ownedBot, botRessource, botFactoLink in listBotRessourceLink
    ubind ownedBot
    if @unit == null // no more owned bots
        jump loop
    sensor payload @unit @totalItems
    if payload > 0
        msg.printAndWait("bot loaded", message)
        sensor actuallyTranportingRessource @unit botRessource
        if actuallyTranportingRessource != payload // not transporting the desired ressource
            msg.printAndWait("bot not transporting the good ressource", message)
            ucontrol payDrop 0 0 0 0 0  // drop actual payload
        print "loaded with "
        set r botRessource
        msg.printAndWait(r, message)
        getlink facto botFactoLink
        print "link: "
        printn botFactoLink
        print " -> "
        msg.printAndWait(facto, message)
        if facto == null // end link list
            set botFactoLink 0
            // dropRessourceBackToStore(core, coreX, coreY)
            // drop if we can, else crash
            // crash ressources
            control payDrop 0 0 0 0 0
        else
            sensor factoType facto @type
            // isGoodR = isGoodRessource(botRessource, factoType)

            if factoType == @ground-factory
                for ressource in [@lead, @coal, @silicon, @titanium]
                    if botRessource == ressource
                        set isGoodR true
                        jump returnIsGoodRessource
                set isGoodR false
                jump returnIsGoodRessource
            elif factoType == @air-factory
                for ressource in [@lead, @silicon]
                    if botRessource == ressource
                        set isGoodR true
                        jump returnIsGoodRessource
                set isGoodR false
                jump returnIsGoodRessource
            elif factoType == @naval-factory
                for ressource in [@metaglass, @silicon]
                    if botRessource == ressource
                        set isGoodR true
                        jump returnIsGoodRessource
                set isGoodR false
                jump returnIsGoodRessource

            set isGoodR false
            #ref returnIsGoodRessource
            // end FunCall isGoodRessource

            print "isGoodRessource "
            msg.printAndWait(isGoodR, message)
            if isGoodR == true
                // isFactoNeedIt = isNeededRessource(botRessource, facto)
                sensor maxCapacity facto @itemCapacity
                sensor currentCapacity facto botRessource
                if currentCapacity < maxCapacity
                    set isFactoNeedIt true
                else
                    set isFactoNeedIt false
                // end FunCall isNeededRessource

                print "isNeededRessource "
                msg.printAndWait(isFactoNeedIt, message)
                if isFactoNeedIt == true
                    // dropRessourceToFacto(facto, radiusApproche)
                    sensor factoX facto @x
                    sensor factoY facto @y
                    ucontrol approach factoX factoY radiusApproche null null
                    ucontrol itemDrop facto 800 null null null
                    // end FunCall dropRessourceToFacto
            op add botFactoLink botFactoLink 1
    else
        msg.printAndWait("bot not loaded", message)
        // bot empty, choose a ressource
        set linkIndex 0
        #ref searchingRessource
        getlink facto botFactoLink
        if facto == null // end link list, search again
            msg.printAndWait("end link list, search again", message)
            set linkIndex 0
            jump searchingRessource
        // ressourceNeeded = getNeededRessource(facto)

        if factoType == @ground-factory
            for ressource in [@lead, @coal, @silicon, @titanium]
                sensor maxCapacity facto @itemCapacity
                sensor currentCapacity facto ressource
                if currentCapacity < maxCapacity
                    set ressourceNeeded ressource
                    jump returngetNeededRessource

        elif factoType == @air-factory
            for ressource in [@lead, @silicon]
                sensor maxCapacity facto @itemCapacity
                sensor currentCapacity facto ressource
                if currentCapacity < maxCapacity
                    set ressourceNeeded ressource
                    jump returngetNeededRessource

        elif factoType == @naval-factory
            for ressource in [@metaglass, @silicon]
                sensor maxCapacity facto @itemCapacity
                sensor currentCapacity facto ressource
                if currentCapacity < maxCapacity
                    set ressourceNeeded ressource
                    jump returngetNeededRessource

        set ressourceNeeded false
        #ref returngetNeededRessource

        // end fun getNeededRessource
        print "facto: "
        print facto
        print " need ressource: "
        msg.printAndWait(ressourceNeeded, message)
        if ressourceNeeded != false
            set botRessource ressourceNeeded
            ucontrol approach coreX coreY radiusApproche null null
            sensor coreStored core ressourceNeeded
            if coreStored > 40 // take it
                ucontrol itemTake core ressourceNeeded 800 null null
            else
                print "[yellow] not enouth of "
                print ressourceNeeded
                msg.printAndWait(" in base, will take something else", message)
                // jump startToTake // <--- will redo what need to be taken
        else
            op add linkIndex linkIndex 1
            jump searchingRessource

// end here
jump loop


isGoodRessource(botRessource, factoType)
    if factoType == @ground-factory
        for ressource in [@lead, @coal, @silicon, @titanium]
            if botRessource == ressource
                return true
        return false
    elif factoType == @air-factory
        for ressource in [@lead, @silicon]
            if botRessource == ressource
                return true
        return false


isNeededRessource(ressource, facto)
    sensor maxCapacity facto @itemCapacity
    sensor currentCapacity facto ressource
    if currentCapacity < maxCapacity
        return true
    return false


dropRessourceToFacto(facto, radiusApproche)
    sensor factoX facto @x
    sensor factoY facto @y
    ucontrol approach factoX factoY radiusApproche null null
    ucontrol itemDrop facto 800 null null null
