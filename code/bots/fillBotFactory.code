

// select all the ressources to take into a container
// if not false, it will be taken
// can change who take it (here @flare)
// the bot will take ressource to it's max transport capacity


import onOff
import idBots
import msg


set appro container1

set switch switch1
set message message1


// which bot to use
ubind @flare  // let player choose with bot image the bind
set botNb 1

set radiusApproche 6 // max working radius: 8


if @unit == null  // no bot of that type
    print "[yellow] no bots of the choosen type, \n"
    print "you can pick another kind of bot in the instruction 'ubind' at the begining of the programme"
    msg.printAndWait("", message)
    end


set coreX null
set coreY null


// where to take ressource from, appro or core

if appro != null
    print "[green] appro not null, will replace core to take ressource from"
    msg.printAndWait(appro, message)
    // appro position, default to core if null
    sensor coreX appro @x
    sensor coreY appro @y
    set core appro

// get core position
#ref getCorePos
// require to have a @unite
if coreX == null
    msg.printAndWait("looking for core, this is done once", message)
    ulocate building core false @copper coreX coreY coreFound core
    if coreFound == false
        msg.printAndWait("[red] core not found, searching again", message)
        msg.printAndWait(core, message)
        msg.printAndWait(coreFound, message)
        jump getCorePos
    msg.printAndWait("[green] core found", message)


// to flag bots with
procId = idBots.genProcId()

set botOwnedNb 0
set loopSearchingBots 0


sensor botType @unit @type // get botType

if botNb > 3
    msg.printAndWait("[red] can't take more than 3 bots\n change parameter 'botNb' to fix it", message)
    end

listBotRessourceLink = [
    (bot1, link1), (bot2, link2),
    (bot3, link3), (bot4, link4)
]

// free memory
// variable content is keep after end instruction, memory not free
for ownedBot, botFactoLink in listBotRessourceLink
    set ownedBot null
    set botFactoLink 0

set reset false

// --- Prog Loop ---
#ref loop

// switch to turn off
isOn = onOff.isOn(switch)
if isOn != true
    msg.printAndWait("[yellow] process is turn off", message)
    set reset true // will reset after switch On
    jump loop

if reset == true
    msg.printAndWait("reset prog", message)
    end // to reset procId and botOwnedNb


op add loopSearchingBots loopSearchingBots 1
if loopSearchingBots > 24
    print "[red] no bots of type: [grey]"
    print botType
    msg.printAndWait("[red] free", message)


// take bot if need more, else loop thought owned bots
if botOwnedNb < botNb // need one ?
    print "[white] need some more bots"
    printflush message
    ubind botType  // try to catch one
    if @unit == null // we no longuer have that kind of bots
        print "[yellow] no bots of the choosen type anymore, \n"
        print "you can pick another kind of bot in the instruction 'ubind' at the begining of the programme"
        msg.printAndWait("", message)
        jump loop
    // have an owner ?
    sensor owner @unit @controller
    sensor typeOfOwner owner @type
    sensor botFlag @unit @flag
    if typeOfOwner == botType   // no owner
        if botFlag == 0         // no flag
            ucontrol flag procId null null null null  // tag it
            print "[green] free bot found !"
            printflush message
            op add botOwnedNb botOwnedNb 1  // botOwnedNb += 1
            // save owned bot
            for ownedBot in [bot1, bot2, bot3, bot4]
                if ownedBot == null
                    set ownedBot @unit
                    jump endBotSave  // kind of a break

#ref endBotSave
set loopSearchingBots 0



for ownedBot, botFactoLink in listBotRessourceLink
    ubind ownedBot
    if @unit == null // no more owned bots
        jump loop

    getlink facto botFactoLink
    sensor payload @unit @totalItems
    if payload > 0
        sensor transportedRessource @unit @firstItem

        if facto == null // end link list
            set botFactoLink 0
            // dropRessourceBackToStore(core, coreX, coreY)
            // drop if we can, else crash
            // crash ressources
            ucontrol approach coreX coreY radiusApproche null null
            ucontrol itemDrop core 800 null null null
            // control payDrop 0 0 0 0 0  // not working
        else
            sensor factoType facto @type
            // isGoodR = isGoodRessource(botRessource, factoType)

            sensor factoType facto @type

            if factoType == @ground-factory
                if selectedBotToBuild == @dagger
                    for ressource in [@silicon, @lead]
                        if transportedRessource == ressource
                            sensor currentCapacity facto ressource
                            if currentCapacity < 30  // we could say < 30 for every ressources for ground
                                jump returnIsGoodRessource

                elif selectedBotToBuild == @crawler
                    for ressource in [@silicon, @coal]
                        if transportedRessource == ressource
                            sensor currentCapacity facto ressource
                            if currentCapacity < 30  // we could say < 30 for every ressources for ground
                                jump returnIsGoodRessource

                elif selectedBotToBuild == @nova
                    for ressource in [@silicon, @lead, @titanium]
                        if transportedRessource == ressource
                            sensor currentCapacity facto ressource
                            if currentCapacity < 30  // we could say < 30 for every ressources for ground
                                jump returnIsGoodRessource

            elif factoType == @air-factory
                if selectedBotToBuild == @flare
                    for ressource in [@silicon]
                        if transportedRessource == ressource
                            sensor currentCapacity facto ressource
                            if currentCapacity < 30  // we could say < 30 for every ressources for ground
                                jump returnIsGoodRessource

                elif selectedBotToBuild == @mono
                    for ressource in [@silicon, @lead]
                        if transportedRessource == ressource
                            sensor currentCapacity facto ressource
                            if currentCapacity < 30  // we could say < 30 for every ressources for ground
                                jump returnIsGoodRessource

            elif factoType == @naval-factory
                if selectedBotToBuild == @risso
                    for ressource in [@silicon, @metaglass]
                        if transportedRessource == ressource
                            sensor currentCapacity facto ressource
                            if currentCapacity < 40  // need 35 metaglass
                                jump returnIsGoodRessource

            elif factoType == @additive-reconstructor
                for ressource in [@graphite, @silicon]
                    if transportedRessource == ressource
                        sensor currentCapacity facto ressource
                        if currentCapacity < 80
                            jump returnIsGoodRessource

            elif factoType == @multiplicative-reconstructor
                for ressource, quatity in [(@silicon, 260), (@titanium, 160), (@metaglass, 80)]
                    if transportedRessource == ressource
                        sensor currentCapacity facto ressource
                        if currentCapacity < quatity
                            jump returnIsGoodRessource

            set isGoodR false
            jump returnIsNotGoodRessource

            #ref returnIsGoodRessource
            set isGoodR true

            #ref returnIsNotGoodRessource
            // end FunCall isGoodRessource

            if isGoodR == true  // dropRessourceToFacto
                sensor factoX facto @x
                sensor factoY facto @y
                ucontrol approach factoX factoY radiusApproche null null
                ucontrol itemDrop facto 800 null null null
            else
                // go see next facto
                op add botFactoLink botFactoLink 1
    else
        // payload == 0, choose a ressource
        set linkIndex 0
        #ref searchingRessource
        getlink facto botFactoLink
        if facto == null // end link list, search again
            set botFactoLink 0
            jump searchingRessource

        // ressourceNeeded = getNeededRessource(facto)
        sensor factoType facto @type
        sensor selectedBotToBuild facto @config

        if factoType == @ground-factory
            if selectedBotToBuild == @dagger
                for ressource in [@silicon, @lead]
                    // sensor maxCapacity facto @itemCapacity
                    sensor currentCapacity facto ressource
                    if currentCapacity < 30  // we could say < 30 for every ressources for ground
                        set ressourceNeeded ressource
                        jump returngetNeededRessource

            elif selectedBotToBuild == @crawler
                for ressource in [@silicon, @coal]
                    sensor currentCapacity facto ressource
                    if currentCapacity < 30  // we could say < 30 for every ressources for ground
                        set ressourceNeeded ressource
                        jump returngetNeededRessource

            elif selectedBotToBuild == @nova
                for ressource in [@silicon, @lead, @titanium]
                    sensor currentCapacity facto ressource
                    if currentCapacity < 30  // we could say < 30 for every ressources for ground
                        set ressourceNeeded ressource
                        jump returngetNeededRessource


        elif factoType == @air-factory
            if selectedBotToBuild == @flare
                for ressource in [@silicon]
                    sensor currentCapacity facto ressource
                    if currentCapacity < 30  // we could say < 30 for every ressources for ground
                        set ressourceNeeded ressource
                        jump returngetNeededRessource

            elif selectedBotToBuild == @mono
                for ressource in [@silicon, @lead]
                    sensor currentCapacity facto ressource
                    if currentCapacity < 30  // we could say < 30 for every ressources for ground
                        set ressourceNeeded ressource
                        jump returngetNeededRessource


        elif factoType == @naval-factory
            if selectedBotToBuild == @risso
                for ressource in [@silicon, @metaglass]
                    sensor currentCapacity facto ressource
                    if currentCapacity < 40  // need 35 metaglass
                        set ressourceNeeded ressource
                        jump returngetNeededRessource


        elif factoType == @additive-reconstructor
            for ressource in [@graphite, @silicon]
                sensor currentCapacity facto ressource
                if currentCapacity < 80
                    set ressourceNeeded ressource
                    jump returngetNeededRessource

        elif factoType == @multiplicative-reconstructor
            for ressource, quatity in [(@silicon, 260), (@titanium, 160), (@metaglass, 80)]
                sensor currentCapacity facto ressource
                if currentCapacity < quatity
                    set ressourceNeeded ressource
                    jump returngetNeededRessource

        set ressourceNeeded false
        #ref returngetNeededRessource

        // end fun getNeededRessource

        if ressourceNeeded != false
            set botRessource ressourceNeeded
            ucontrol approach coreX coreY radiusApproche null null
            sensor coreStored core ressourceNeeded
            if coreStored > 40 // take it
                ucontrol itemTake core ressourceNeeded 800 null null
            else
                print "[yellow] not enouth of "
                print ressourceNeeded
                msg.printAndWait(" in base, will take something else", message)
                op add botFactoLink botFactoLink 1
        else
            op add botFactoLink botFactoLink 1
            jump searchingRessource

// end here
jump loop


// will need @counter for for/functions optimisation and stop copy/past it
// set @counter rtnAddr
