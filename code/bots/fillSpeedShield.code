

// will fill with one bot all linked overdrive and shield
// if turret given, will desactivate shield when no ennemies around

import msg
import store
import idBots
import onOff


set store container1
set message message1
set switch switch1
set turret hail1


coreX, coreY, core = store.getCoreOr(store, message)


// to flag bots with, done only once
if procId == null
    procId = idBots.genProcId()


set reset false

set haveTryGetBetterBot false

// --- Prog Loop ---
#ref loop


// switch to turn off
isOn = onOff.isOn(switch)
if isOn != true
    msg.printAndWait("[yellow] process is turn off", message)
    set reset true // will reset after switch On
    if @unit != null
        ucontrol flag 0 null null null null
        ubind null
    jump loop

if reset == true
    msg.printAndWait("reset prog", message)
    end // to reset procId and botOwnedNb


// check turret to turn shield on if no radars
sensor isDead turret @dead
if isDead == true
    set turret null

if turret == null
    if hail1 != null
        set turret hail1


// if turret, list all force-projector to turn it on/off if needed
if turret != null
    set aTurretWasHere true
    radar enemy any any distance turret 1 spotted
    set linkId 0
    #ref loopProjector
    getlink projector linkId
    if projector == null
        jump endLoopProjector
    sensor projectorType projector @type
    if projectorType == @force-projector
        control enabled projector spotted null null null
    elif projectorType == @overdrive-dome
        control enabled projector spotted null null null
    elif projectorType == @overdrive-projector
        control enabled projector spotted null null null
    elif projectorType == @mend-projector
        control enabled projector spotted null null null
    elif projectorType == @mender
        control enabled projector spotted null null null
    op add linkId linkId 1
    jump loopProjector
#ref endLoopProjector


// if the radar turret is disconnected, enable all shield
if turret == null
    if aTurretWasHere == true
        set aTurretWasHere false
        set linkId 0
        #ref loopProjectorActivate
        getlink projector linkId
        if projector == null
            jump endLoopProjectorActivate
        sensor projectorType projector @type
        if projectorType == @force-projector
            control enabled projector true null null null
        elif projectorType == @overdrive-dome
            control enabled projector true null null null
        elif projectorType == @overdrive-projector
            control enabled projector true null null null
        elif projectorType == @mend-projector
            control enabled projector true null null null
        elif projectorType == @mender
            control enabled projector true null null null
        op add linkId linkId 1
        jump loopProjectorActivate
#ref endLoopProjectorActivate


// if we have a unit
if @unit != null  // @unit is myBot
    sensor payload @unit @totalItems
    if payload > 0 // with ressource, check first if we could need the ressource
        sensor transportedRessource @unit @firstItem
        facto = getFactoThatNeedThisRessource(transportedRessource)
        if facto != null // a facto need this ressource
            fillFacto(facto, transportedRessource, core, procId, message)
            we have the best bot here
            set haveTryGetBetterBot false
            jump loop

    if haveTryGetBetterBot == false
        set haveTryGetBetterBot true
        jump freebotAndLoop

    // check facto that need another ressource:
    facto, ressource = getFactoNeededRessource()
    if facto != null
        fillFacto(facto, ressource, core, procId, message)
        jump loop
    else
        jump freebotAndLoop


// we don't have a bot, do we need one ?
facto, ressource = getFactoNeededRessource()
print "no bots, need something ? "
print facto
print " need: "
print ressource
printflush message
if facto != null
    fillFacto(facto, ressource, core, procId, message)

jump loop

#ref freebotAndLoop
// free bot
// ask him to go to the base
ucontrol approach coreX coreY 5 null null
ucontrol flag 0 null null null null
ubind null
jump loop

// given a facto and the needed ressource, will use a bot to fill it
fillFacto(facto, ressource, core, procId, message)
    print "facto: "
    print facto
    print " need to be filled with ressource: "
    print ressource
    printflush message
    sensor coreStored core ressource
    if coreStored < 10
        print "[yellow] not enougth of "
        print ressource
        msg.printAndWait(" in core/store", message)
        return false

    if @unit == null  // will need a unit
        succeed = bindBotWithPreferenceRessource(ressource, procId)
        if succeed == true
            print "we have a good bot"
            printflush message
        else
            return false

    sensor payload @unit @totalItems
    if payload > 0
        sensor transportedRessource @unit @firstItem
        if transportedRessource == ressource
            giveRessourceToFacto(facto)
        else
            throwRessource(core)
    else
        getRessourceInCore(ressource, core)


// will ubind a bot that have the needed ressource or is empty or at last have an incorrect ressource
bindBotWithPreferenceRessource(ressource, procId)
    if @unit != null
        sensor payload @unit @totalItems
        if payload > 0
            sensor transportedRessource @unit @firstItem
            if transportedRessource == ressource
                return true  // we already have the bot
        ucontrol flag 0 null null null null // free it
    // here, we don't have a good bot, will search for one
    found = searchBotTransportingRessource(ressource)
    if found == true
        ucontrol flag procId null null null null // tag it
        return true
    found = searchEmptyBot()
    if found == true
        ucontrol flag procId null null null null // tag it
        return true
    found = getFreeBot()
    if found == true
        return true
    ubind null // clear unsucess last bind
    return false


searchBotTransportingRessource(ressource)
    ubind @flare
    set firstBot @unit
    #ref loopSearchingBetterBot
    ubind @flare
    if @unit == null // no bot of that botType
        return false
    sensor flag @unit @flag
    if flag == 0  // bot is free
        sensor payload @unit @totalItems
        if payload > 0
            sensor transportedRessource @unit @firstItem
            if transportedRessource == ressource
                return true  // best bot found, he already have the ressource

    if @unit == firstBot
        return false
    jump loopSearchingBetterBot


searchEmptyBot()
    ubind @flare
    set firstBot @unit
    #ref loopSearchingBetterBot
    ubind @flare
    if @unit == null // no bot of that botType
        return false
    sensor flag @unit @flag
    if flag == 0  // bot is free
        sensor payload @unit @totalItems
        if payload == 0
            return true  // best bot found, he already have the ressource

    if @unit == firstBot
        return false
    jump loopSearchingBetterBot


getFreeBot()
    ubind @flare
    set firstBot @unit
    #ref loopSearchingBetterBot
    ubind @flare
    if @unit == null // no bot of that botType
        return false
    sensor flag @unit @flag
    if flag == 0  // bot is free
        return true

    if @unit == firstBot
        return false
    jump loopSearchingBetterBot



giveRessourceToFacto(facto)
    sensor factoX facto @x
    sensor factoY facto @y
    ucontrol approach factoX factoY 5 null null
    ucontrol itemDrop facto 800 null null null


getRessourceInCore(ressource, core)
    sensor coreX core @x
    sensor coreY core @y
    ucontrol approach coreX coreY 5 null null
    ucontrol itemTake core ressource 800 null null


throwRessource(core)
    sensor coreX core @x
    sensor coreY core @y
    ucontrol approach coreX coreY 5 null null
    ucontrol itemDrop core 800 null null null


// return facto and the ressource needed if need it, else null/false
getFactoNeededRessource()
    set factoId -1
    #ref searching
    op add factoId factoId 1
    getlink facto factoId
    if facto == null
        return null, false
    needed = getNeededRessource(facto)
    if needed != false
        return facto, needed
    jump searching


// return facto if exist that need the ressource, else false
getFactoThatNeedThisRessource(transportedRessource)
    set factoId -1
    #ref searching
    op add factoId factoId 1
    getlink facto factoId
    if facto == null
        return false

    isGood = isGoodRessource(transportedRessource, facto)
    if isGood == true
        return facto
    else
        jump searching



// will return ressourceType needed by factory or false if facto does not need any
getNeededRessource(facto)
    sensor factoType facto @type
    sensor selectedBotToBuild facto @config

    if factoType == @overdrive-projector
        for ressource in [@phase-fabric]
            sensor currentCapacity facto ressource
            if currentCapacity < 4
                return ressource

    elif factoType == @overdrive-dome
        for ressource in [@phase-fabric, @silicon]
            sensor currentCapacity facto ressource
            if currentCapacity < 4
                return ressource

    elif factoType == @force-projector
        for ressource in [@phase-fabric]
            sensor currentCapacity facto ressource
            if currentCapacity < 4
                return ressource

    elif factoType == @mend-projector
        for ressource in [@phase-fabric]
            sensor currentCapacity facto ressource
            if currentCapacity < 4
                return ressource

    elif factoType == @mender
        for ressource in [@silicon]
            sensor currentCapacity facto ressource
            if currentCapacity < 4
                return ressource
    return false


isGoodRessource(transportedRessource, facto)
    sensor factoType facto @type
    sensor selectedBotToBuild facto @config
    if factoType == @overdrive-projector
        for ressource in [@phase-fabric]
            if transportedRessource == ressource
                sensor currentCapacity facto ressource
                if currentCapacity < 4
                    return true

    elif factoType == @overdrive-dome
        for ressource in [@phase-fabric, @silicon]
            if transportedRessource == ressource
                sensor currentCapacity facto ressource
                if currentCapacity < 4
                    return true

    elif factoType == @force-projector
        for ressource in [@phase-fabric]
            if transportedRessource == ressource
                sensor currentCapacity facto ressource
                if currentCapacity < 4
                    return true

    elif factoType == @mend-projector
        for ressource in [@phase-fabric]
            if transportedRessource == ressource
                sensor currentCapacity facto ressource
                if currentCapacity < 4
                    return true

    elif factoType == @mender
        for ressource in [@silicon]
            if transportedRessource == ressource
                sensor currentCapacity facto ressource
                if currentCapacity < 4
                    return true
    return false
